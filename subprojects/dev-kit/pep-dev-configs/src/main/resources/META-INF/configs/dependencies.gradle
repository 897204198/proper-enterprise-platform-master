ext {
    versions = [:]
    libraries = [:]
}

versions.flowable           = '6.4.0'
versions.groovy             = '2.5.0'
versions.hibernate          = '5.2.17.Final'
versions.jackson            = '2.9.6'
versions.logback            = '1.2.3'
versions.mongo              = '3.4.0'
versions.quartz             = '2.3.0'
versions.slf4j              = '1.7.25'
versions.spring             = '5.1.2.RELEASE'
versions.spring_boot        = '2.0.6.RELEASE'
versions.spring_data        = 'Kay-SR11'
versions.springfox          = '3.0.0-SNAPSHOT'

configurations.all {
//    //Don't cache snapshots, need to check work or not
//    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'

    resolutionStrategy.force 'xml-apis:xml-apis:1.4.01'

    // 强制所有依赖使用相同版本的 Spring Framework
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def req = details.requested
        if (req.group == 'org.springframework' && req.name != 'springloaded') {
            details.useVersion versions.spring
        } else if (req.name == 'mongo-java-driver') {
            details.useTarget "org.mongodb:mongodb-driver:${versions.mongo}"
        } else if (req.group == 'io.netty' && req.version =="4.1.29.Final") {
            //暂且未知4.1.29这个版本的netty是谁引入的  使用pushy引用的netty版本4.1.25
            details.useVersion "4.1.25.Final"
        } else if (req.name == 'flowable-ui-common'){
            //强制使用流程flowable-ui-common为proper包
            details.useTarget("com.proper.enterprise.platform:flowable-ui-common:${versions.flowable}-SNAPSHOT")
        }

        def nameVers = [
            'javassist': '3.19.0-GA',
            'jcl-over-slf4j': versions.slf4j,
            'logback': versions.logback ,
            'springloaded': '1.2.8.RELEASE',
            // xalan < 2.7.0 的版本会导致与 spring-ws 的冲突
            // http://stackoverflow.com/questions/12467186/java-spring-ws-org-springframework-ws-soap-saaj-saajsoapenvelopeexception-could/13156775#13156775
            'xalan': '2.7.2'
        ]
        nameVers.each { name, ver ->
            if (req.name == name) {
                details.useVersion ver
            }
        }

        def groupVers = [
            'com.fasterxml.jackson.core': versions.jackson,
            'com.fasterxml.jackson.dataformat': versions.jackson,
            'org.codehaus.groovy': versions.groovy
        ]
        groupVers.each { group, ver ->
            if (req.group == group) {
                details.useVersion ver
            }
        }
    }

    // Exclude other log frameworks
    exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    exclude group: 'org.apache.commons.logging'
    exclude group: 'org.apache.log4j'
    exclude group: 'log4j'

    // Exclude spring security
    exclude group: 'org.springframework.security', module: 'spring-security-web'
    exclude group: 'org.springframework.security', module: 'spring-security-config'
    exclude group: 'org.springframework.security', module: 'spring-security-crypto'

    // Exclude HikariCP
    exclude module: 'HikariCP'

    // Exclude flowable cmmn, dmn, idm engines and other dependencies not used
    exclude module: 'flowable-cmmn-api'
    exclude module: 'flowable-content-api'
    exclude module: 'flowable-spring-security'
}

libraries.ali_webpay = 'com.ali.webpay:ali-webpay:1.0.0'

//libraries.aspectjrt = "org.aspectj:aspectjrt:${versions.aspectj}"
libraries.aspectjweaver = "org.aspectj:aspectjweaver:1.8.6"

//libraries.cas_server_core = 'org.jasig.cas:cas-server-core:3.5.2'

//libraries.cas_client_core = 'org.jasig.cas.client:cas-client-core:3.1.12'

//libraries.cglib = 'cglib:cglib:2.2'

libraries.checkstyle = 'com.puppycrawl.tools:checkstyle:8.14'
libraries.checkstyle_proper = 'com.proper:proper-checkstyle:0.1.0-SNAPSHOT'

libraries.cmb_b2b = 'com.cmb.b2b:cmb-b2b:1.0.0'
libraries.cmb_pay = 'com.cmb.pay:cmb-pay:1.0.0'

libraries.commons_collections = 'commons-collections:commons-collections:3.2.2'

libraries.commons_codec = 'commons-codec:commons-codec:1.11'

libraries.commons_fileupload = 'commons-fileupload:commons-fileupload:1.3.3'

libraries.commons_lang3 = 'org.apache.commons:commons-lang3:3.8.1'

libraries.druid_spring_boot_starter = 'com.alibaba:druid-spring-boot-starter:1.1.10'

libraries.el_api="javax.el:el-api:3.0"

libraries.flowable_engine                           = "org.flowable:flowable-engine:${versions.flowable}"
libraries.flowable_http                             = "org.flowable:flowable-http:${versions.flowable}"
libraries.flowable_idm_spring_configurator          = "org.flowable:flowable-idm-spring-configurator:${versions.flowable}"
libraries.flowable_json_converter                   = "org.flowable:flowable-json-converter:${versions.flowable}"
libraries.flowable_rest                             = "org.flowable:flowable-rest:${versions.flowable}"
libraries.flowable_spring                           = "org.flowable:flowable-spring:${versions.flowable}"
libraries.flowable_spring_boot_autoconfigure        = "org.flowable:flowable-spring-boot-autoconfigure:${versions.flowable}"
libraries.flowable_spring_boot_starter_process      = "org.flowable:flowable-spring-boot-starter-process:${versions.flowable}"
libraries.flowable_spring_boot_starter_process_rest = "org.flowable:flowable-spring-boot-starter-process-rest:${versions.flowable}"
libraries.flowable_spring_configurator              = "org.flowable:flowable-spring-configurator:${versions.flowable}"
libraries.flowable_ui_modeler_rest                  = "org.flowable:flowable-ui-modeler-rest:${versions.flowable}"

libraries.flowable_web_designer                     = "com.proper.enterprise.platform:flowable-web-designer:${versions.flowable}-SNAPSHOT"

// groovy-all include all below modules, used by code quality and workflow module
libraries.groovy_all = "org.codehaus.groovy:groovy-all:${versions.groovy}"
// sub modules
libraries.groovy = "org.codehaus.groovy:groovy:${versions.groovy}"
// libraries.groovy_ant = "org.codehaus.groovy:groovy-ant:${versions.groovy}"
// libraries.groovy_bsf = "org.codehaus.groovy:groovy-bsf:${versions.groovy}"
// libraries.groovy_console = "org.codehaus.groovy:groovy-console:${versions.groovy}"
 libraries.groovy_dateutil = "org.codehaus.groovy:groovy-dateutil:${versions.groovy}"
// libraries.groovy_docgenerator = "org.codehaus.groovy:groovy-docgenerator:${versions.groovy}"
// libraries.groovy_groovydoc = "org.codehaus.groovy:groovy-groovydoc:${versions.groovy}"
// libraries.groovy_groovysh = "org.codehaus.groovy:groovy-groovysh:${versions.groovy}"
// libraries.groovy_jmx = "org.codehaus.groovy:groovy-jmx:${versions.groovy}"
libraries.groovy_json = "org.codehaus.groovy:groovy-json:${versions.groovy}"
// libraries.groovy_jsr223 = "org.codehaus.groovy:groovy-jsr223:${versions.groovy}"
// libraries.groovy_servlet = "org.codehaus.groovy:groovy-servlet:${versions.groovy}"
libraries.groovy_sql = "org.codehaus.groovy:groovy-sql:${versions.groovy}"
// libraries.groovy_swing = "org.codehaus.groovy:groovy-swing:${versions.groovy}"
// libraries.groovy_test = "org.codehaus.groovy:groovy-test:${versions.groovy}"
// libraries.groovy_testng = "org.codehaus.groovy:groovy-testng:${versions.groovy}"
// libraries.groovy_xml = "org.codehaus.groovy:groovy-xml:${versions.groovy}"

//libraries.guava = 'com.google.guava:guava:18.0'

libraries.h2 = 'com.h2database:h2:1.4.197'

//libraries.hibernate_c3p0 = "org.hibernate:hibernate-c3p0:${versions.hibernate}"
//libraries.hibernate_core = "org.hibernate:hibernate-core:${versions.hibernate}"
libraries.hibernate_ehcache = "org.hibernate:hibernate-ehcache:${versions.hibernate}"
libraries.hibernate_entitymanager = "org.hibernate:hibernate-entitymanager:${versions.hibernate}"
//libraries.hibernate_envers = "org.hibernate:hibernate-envers:${versions.hibernate}"
//libraries.hibernate_infinispan = "org.hibernate:hibernate-infinispan:${versions.hibernate}"
//libraries.hibernate_proxool = "org.hibernate:hibernate-proxool:${versions.hibernate}"
libraries.hibernate_redis = 'com.github.debop:hibernate-redis:2.3.2'
libraries.hibernate_validator = "org.hibernate:hibernate-validator:5.1.3.Final"

//libraries.jackson_annotations = "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}"
//libraries.jackson_core = "com.fasterxml.jackson.core:jackson-core:${versions.jackson}"
libraries.jackson_databind = "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"

libraries.javax_el="org.glassfish.web:javax.el:2.2.4"

libraries.javax_inject = "javax.inject:javax.inject:1"

libraries.jaxws_rt = 'com.sun.xml.ws:jaxws-rt:2.3.1'

libraries.jpa_api = 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final'

//libraries.json_lib = 'net.sf.json-lib:json-lib:2.4:jdk15@jar'

//libraries.jsp_api = 'javax.servlet.jsp:jsp-api:2.2'

//libraries.jstl = 'jstl:jstl:1.2'
libraries.liquibase = 'com.proper.enterprise.platform:liquibase-core:3.6.2-SNAPSHOT'
libraries.logback_classic = dependencies.module("ch.qos.logback:logback-classic:${versions.logback}") {
    dependency "ch.qos.logback:logback-core:${versions.logback}"
}
//libraries.lombok = "org.projectlombok:lombok:1.16.20"

libraries.mail = 'com.sun.mail:javax.mail:1.6.2'

libraries.mongodb_driver = "org.mongodb:mongodb-driver:${versions.mongo}"

libraries.mysql_binlog_connector_java = 'com.github.shyiko:mysql-binlog-connector-java:0.16.1'

libraries.mysql_driver = 'org.mariadb.jdbc:mariadb-java-client:1.5.4'
//libraries.mysql_driver = 'mysql:mysql-connector-java:5.1.38'
//libraries.neo4j_driver = 'org.neo4j.driver:neo4j-java-driver:1.5.0'

libraries.netty_all = 'io.netty:netty-all'

libraries.okhttp = 'com.squareup.okhttp3:okhttp:3.4.1'
libraries.oracle_driver = 'com.oracle:ojdbc6:1.0'

libraries.p3c_pmd = 'com.alibaba.p3c:p3c-pmd:1.3.6'

libraries.pinyin4j = 'com.belerweb:pinyin4j:2.5.0'

//libraries.poi = 'org.apache.poi:poi:3.7'

libraries.quartz = [
    "org.quartz-scheduler:quartz:${versions.quartz}"
//    "org.quartz-scheduler:quartz-jobs:${versions.quartz}"
]

libraries.reactor_netty = 'io.projectreactor.netty:reactor-netty:0.8.4.RELEASE'

libraries.redisson = 'org.redisson:redisson:3.5.3'

libraries.reflections = 'org.reflections:reflections:0.9.11'

libraries.servlet_api = 'javax.servlet:javax.servlet-api:3.1.0'

libraries.slf4j_api = "org.slf4j:slf4j-api:${versions.slf4j}"

libraries.spock = 'org.spockframework:spock-core:1.2-groovy-2.5'

libraries.spring_boot                         = 'org.springframework.boot:spring-boot'
libraries.spring_boot_configuration_processor = 'org.springframework.boot:spring-boot-configuration-processor'
libraries.spring_boot_devtools                = 'org.springframework.boot:spring-boot-devtools'
libraries.spring_boot_starter_actuator        = 'org.springframework.boot:spring-boot-starter-actuator'
libraries.spring_boot_starter_cache           = 'org.springframework.boot:spring-boot-starter-cache'
libraries.spring_boot_starter_data_jpa        = 'org.springframework.boot:spring-boot-starter-data-jpa'
libraries.spring_boot_starter_mail            = 'org.springframework.boot:spring-boot-starter-mail'
libraries.spring_boot_starter_data_mongodb    = 'org.springframework.boot:spring-boot-starter-data-mongodb'
libraries.spring_boot_starter_test            = 'org.springframework.boot:spring-boot-starter-test'
libraries.spring_boot_starter_web             = 'org.springframework.boot:spring-boot-starter-web'

//libraries.spring_beans = "org.springframework:spring-beans:${versions.spring}"
//libraries.spring_context = "org.springframework:spring-context:${versions.spring}"
libraries.spring_context_support = "org.springframework:spring-context-support:${versions.spring}"
libraries.spring_messaging = "org.springframework:spring-messaging:${versions.spring}"
libraries.spring_orm = [
    "org.springframework:spring-orm:${versions.spring}",
    libraries.aspectjweaver
]
libraries.spring_oxm = "org.springframework:spring-oxm:${versions.spring}"
libraries.spring_test = "org.springframework:spring-test:${versions.spring}"
libraries.spring_tx = "org.springframework:spring-tx:${versions.spring}"
//libraries.spring_web = "org.springframework:spring-web:${versions.spring}"
libraries.spring_websocket = "org.springframework:spring-websocket:${versions.spring}"
libraries.spring_webmvc = "org.springframework:spring-webmvc:${versions.spring}"
libraries.spring_jms = "org.springframework:spring-jms:${versions.spring}"

libraries.spring_data_commons = 'org.springframework.data:spring-data-commons'
libraries.spring_data_jpa = 'org.springframework.data:spring-data-jpa'
libraries.spring_data_mongodb = 'org.springframework.data:spring-data-mongodb'
libraries.spring_data_neo4j= 'org.springframework.data:spring-data-neo4j'
//libraries.spring_data_redis = [
//    'org.springframework.data:spring-data-redis',
//    'org.apache.commons:commons-pool2:2.2',
//    'redis.clients:jedis:2.9.0'
//]

libraries.springfox = [
    "io.springfox:springfox-spring-webmvc:${versions.springfox}",
    "io.springfox:springfox-swagger2:${versions.springfox}",
    "io.springfox:springfox-swagger-ui:${versions.springfox}"
]

//libraries.urlrewritefilter = 'org.tuckey:urlrewritefilter:4.0.3'
libraries.thumbnailator = 'net.coobird:thumbnailator:0.4.8'

libraries.tomcat_websocket = 'org.apache.tomcat.embed:tomcat-embed-websocket'

libraries.validation_api = "javax.validation:validation-api:2.0.1.Final"
libraries.nutz='org.nutz:nutz:1.r.66'
//ios apns push sdk. see: https://github.com/relayrides/pushy/
libraries.push_vendor_apns = [
    'com.turo:pushy:0.13.3',
    'io.netty:netty-tcnative-boringssl-static:2.0.8.Final'
]

//android huawei push sdk
libraries.push_vendor_huawei=[
    'com.huawei.pushapi:huaweiPushSdk:0.3.12',
    'org.apache.httpcomponents:httpclient:4.3.3',
    'org.apache.httpcomponents:httpclient-cache:4.3.3',
    'org.apache.httpcomponents:fluent-hc:4.3.3',
    'org.apache.httpcomponents:httpmime:4.3.3',
    'com.alibaba:fastjson:1.1.32'
]
//android xiaomi push sdk
libraries.push_vendor_xiaomi=[
    'com.xiaomi.pushapi:xiaomiPushSdk:2.2.16',
    'com.googlecode.json-simple:json-simple:1.1.1'
]
