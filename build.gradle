buildscript {
    dependencies {
        classpath 'com.h2database:h2:1.3.176'
    }
}

plugins {
    id 'com.gradle.build-scan' version '1.16'
    id 'io.spring.dependency-management' version '1.0.6.RELEASE'
    id 'org.liquibase.gradle' version '1.2.4'
    id 'org.springframework.boot' version '2.0.6.RELEASE'
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
    publishOnFailure()
}

allprojects {
    repositories {
        maven {
            url "${nexusUrl}/repository/maven-public"
            credentials(PasswordCredentials) {
                username = nexusUsername
                password = nexusPassword
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'utf-8'
        options.compilerArgs = ['-Xlint:-options']
    }

    tasks.withType(GroovyCompile) {
        options.encoding = 'utf-8'
        options.compilerArgs = ['-Xlint:-options']
        groovyOptions.encoding = 'utf-8'
    }
}

ext {
    pepDevConfRoot = "$rootDir/subprojects/dev-kit/pep-dev-configs/src/main/resources/META-INF"
    projectGenerator = [:]
    projectGenerator.name = 'pep'
    projectGenerator.path = 'platform'
    projectGenerator.version = '0.5.x'
    liquibaseUrl = 'jdbc:h2:~/data/h2/pep_dev;AUTO_SERVER=TRUE;DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE'
    liquibaseOldUrl = 'jdbc:h2:~/data/h2-diff/pep_dev;AUTO_SERVER=TRUE;DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE'
    liquibaseUsername = 'sa'
    liquibasePassword = ''
}

liquibase {
    activities {
        genDev {
            changeLogFile 'db/dev.xml'
            url           liquibaseUrl
            username      liquibaseUsername
            password      liquibasePassword
        }
        genDevData {
            changeLogFile     'db/dev-data.xml'
            url               liquibaseUrl
            username          liquibaseUsername
            password          liquibasePassword
            diffTypes         'data'
        }
        diffDev {
            changeLogFile     'db/dev-diff.xml'
            url               liquibaseOldUrl
            username          liquibaseUsername
            password          liquibasePassword
            referenceUrl      liquibaseUrl
            referenceUsername liquibaseUsername
            referencePassword liquibasePassword
        }
    }
    runList = 'genDevData'
}

apply plugin: 'idea'
apply from: "$pepDevConfRoot/configs/generator/generator.gradle"

subprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'maven'

    apply plugin: 'io.spring.dependency-management'

    apply from: "$pepDevConfRoot/configs/dependencies.gradle"

    apply from: "$pepDevConfRoot/configs/quality/codeQuality.gradle"

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot:${versions.spring_boot}"
            mavenBom "org.springframework.data:spring-data-releasetrain:${versions.spring_data}"
        }
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    group = 'com.proper.enterprise.platform'
    // Needs to change version in dependencies.gradle:6:32 TOGETHER!!
    // Needs to change version in PEPVersion.java:10:17 TOGETHER!!
    version = '0.5.0-SNAPSHOT'

    test {
        reports.html.enabled = false
        reports.junitXml.enabled = false
        //project unit parallel
        //maxParallelForks = 2
        //GC
        forkEvery = 100
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourcesJar
    }

    dependencies {
        annotationProcessor libraries.spring_boot_configuration_processor

                compileOnly libraries.p3c_pmd,
                            libraries.spring_boot_starter_web,
                            libraries.springfox

            testCompileOnly libraries.groovy,
                            libraries.groovy_dateutil,
                            libraries.p3c_pmd,
                            libraries.spock,
                            libraries.spring_boot_starter_web

            testRuntimeOnly libraries.groovy_all,
                            libraries.spring_boot_starter_web

         testImplementation libraries.spring_boot_starter_test
    }

    // spring boot configuration processor only build meta json into build folder
    // but auto complete needs it in src, so do copy after compile java task
    task cpCfgMeta(type: Copy) {
        from 'build/classes/java/main/META-INF'
        into 'src/main/resources/META-INF'
    }
    compileJava.finalizedBy cpCfgMeta

    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: "${nexusUrl}/repository/maven-releases") {
                    authentication(userName: nexusUsername, password: nexusPassword)
                }
                snapshotRepository(url: "${nexusUrl}/repository/maven-snapshots") {
                    authentication(userName: nexusUsername, password: nexusPassword)
                }
            }
        }
    }
}
