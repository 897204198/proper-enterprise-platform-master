allprojects {
    repositories {
        maven {
            url "${nexusUrl}/repository/maven-public"
            credentials(PasswordCredentials) {
                username = nexusUsername
                password = nexusPassword
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'utf-8'
        options.compilerArgs = ['-Xlint:-options']
    }

    tasks.withType(GroovyCompile) {
        options.encoding = 'utf-8'
        options.compilerArgs = ['-Xlint:-options']
        groovyOptions.encoding = 'utf-8'
    }
}

apply plugin: 'idea'
apply plugin: 'eclipse'

subprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'maven'

    apply from: "$rootDir/gradle/dependencies.gradle"

    apply from: "$rootDir/gradle/codeQuality.gradle"

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    check.dependsOn test
    build.dependsOn test

    dependencies {
        compile libraries.slf4j_api,
                libraries.spring_data_jpa,
                libraries.spring_webmvc

        runtime libraries.logback_classic

        testCompile libraries.groovy,
                    libraries.junit,
                    libraries.spock,
                    libraries.spring_test

        testRuntime libraries.aspectjweaver,
                    libraries.h2,
                    libraries.hibernate_hikaricp,
                    libraries.hibernate_ehcache,
                    libraries.hibernate_entitymanager,
                    libraries.servlet_api,
                    libraries.spring_context_support
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: "${nexusUrl}/repository/maven-releases") {
                    authentication(userName: nexusUsername, password: nexusPassword)
                }
                snapshotRepository(url: "${nexusUrl}/repository/maven-snapshots") {
                    authentication(userName: nexusUsername, password: nexusPassword)
                }
            }
        }
    }
}

// could use init-${sub-project-name} task to initial a sub project folder
tasks.addRule('Pattern: init-pep-<ID>') { String initSubProj ->
    if (initSubProj.startsWith('init-pep-')) {
        task(initSubProj) << {
            def subProjName = (initSubProj - 'init-').toLowerCase()
            def subProjRoot = "${rootProject.projectDir}/subprojects/$subProjName"
            def confPath = (subProjName - 'pep-').replace('-', '/')

            delete(subProjRoot)
            mkdir(subProjRoot)
            mkdir("$subProjRoot/src/main/java/com/proper/enterprise/platform")
            mkdir("$subProjRoot/src/main/resources")
            mkdir("$subProjRoot/src/main/resources/conf/$confPath")
            file("$subProjRoot/src/main/resources/conf/$confPath/${subProjName - 'pep-'}.properties").createNewFile()
            mkdir("$subProjRoot/src/main/resources/spring/$confPath")
            file("$subProjRoot/src/main/resources/spring/$confPath/applicationContext-${subProjName - 'pep-'}.xml").createNewFile()
            mkdir("$subProjRoot/src/test/groovy/com/proper/enterprise/platform")
            mkdir("$subProjRoot/src/test/resources")

            file("$subProjRoot/${subProjName}.gradle").createNewFile()
            file("$subProjRoot/README.md").withWriter {
                it.write("""$subProjName
${'=' * subProjName.length()}

Proper Enterprise Platform""")
            }
        }
    }
}
